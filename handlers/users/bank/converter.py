from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton

from data.config import admins
from data.peewee import Miner, Courses
from handlers.users.bank.bank import bank_keyboard
from handlers.users.miner import statistic_keyboard
from keyboards.default.menu_keyboard import menu
from loader import dp


def sellkeyboard(minerid):
    miner = Miner.get(minerid=minerid)

    buttons = [
        InlineKeyboardButton(text='–£–≥–æ–ª—å', callback_data='coal'),
        InlineKeyboardButton(text='–û–ª–æ–≤–æ', callback_data='tin'),
        InlineKeyboardButton(text='–ñ–µ–ª–µ–∑–æ', callback_data='iron'),
        InlineKeyboardButton(text='–°–µ—Ä–µ–±—Ä–æ', callback_data='silver'),
        InlineKeyboardButton(text='–ó–æ–ª–æ—Ç–æ', callback_data='aurum'),
        InlineKeyboardButton(text='–ü–ª–∞—Ç–∏–Ω–∞', callback_data='platinum'),
        InlineKeyboardButton(text='–ü–∞–ª–ª–∞–¥–∏–π', callback_data='palladium'),
        InlineKeyboardButton(text='üíµ –í—Å—ë', callback_data='sell_all'),
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='in_bank')
    ]
    sell_keyboard = InlineKeyboardMarkup(row_width=3)
    sell_keyboard.add(*buttons)

    return sell_keyboard

def ore_price(ore, ore_course):
    ans = ore * ore_course
    return ans

def percent_create(ore, default_course):
    ans = ''
    percent = 100 * ore / default_course - 100
    if percent >= 0:
        ans = '+' + str(percent.__round__(1))
    elif percent < 0:
        ans = str(percent.__round__(1))
    return ans

def message_courses_await(course, money):

    text =  f'\n<b>üßæ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—ã—Ä—å—è</b>: {money:.2f}$\n' \
    f'<b>\nüìä –ö—É—Ä—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (–∑–∞ 100 —à—Ç.) - </b>\n' \
    f'\n[–ö—É—Ä—Å] \ [–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ –æ—Ç–Ω. –∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º—É –∫—É—Ä—Å—É]\n' \
    f'\n‚¨õÔ∏è –£–≥–æ–ª—å - {course.coal * 100:.5f}$ \ {percent_create(course.coal, 0.001)}%\n' \
    f'\nüüß –û–ª–æ–≤–æ - {course.tin * 100:.5f}$ \ {percent_create(course.tin, 0.005)}%\n' \
    f'\n‚¨úÔ∏è –ñ–µ–ª–µ–∑–æ - {course.iron * 100:.5f}$ \ {percent_create(course.iron, 0.03)}%\n' \
    f'\n‚¨úÔ∏è –°–µ—Ä–µ–±—Ä–æ - {course.silver * 100:.5f}$ \ {percent_create(course.silver, 0.1)}%\n' \
    f'\nüü® –ó–æ–ª–æ—Ç–æ - {course.aurum * 100:.5f}$ \ {percent_create(course.aurum, 5.0)}%\n' \
    f'\nüü• –ü–ª–∞—Ç–∏–Ω–∞ - {course.platinum * 100:.5f}$ \ {percent_create(course.platinum, 8.5)}%\n' \
    f'\nüü¶ –ü–∞–ª–ª–∞–¥–∏–π - {course.palladium * 100:.5f}$ \ {percent_create(course.palladium, 18.9)}%\n'
    return text

@dp.callback_query_handler(text='üßæ')
async def info_courses(call: CallbackQuery):
    miner = Miner.get(minerid=call.from_user.id)
    course = Courses.get()
    money = ore_price(miner.coal, course.coal) + ore_price(miner.tin, course.tin) + ore_price(miner.iron, course.iron) \
            + ore_price(miner.silver, course.silver) + ore_price(miner.aurum, course.aurum) \
            + ore_price(miner.platinum, course.platinum) + ore_price(miner.palladium, course.palladium)
    await call.message.edit_text(text=message_courses_await(course, money),
                                 reply_markup=statistic_keyboard('update_course', '‚õè', miner.fast_sell))

@dp.callback_query_handler(text='update_course')
async def info_courses(call: CallbackQuery):
    miner = Miner.get(minerid=call.from_user.id)
    course = Courses.get()
    money = ore_price(miner.coal, course.coal) + ore_price(miner.tin, course.tin) + ore_price(miner.iron, course.iron) \
            + ore_price(miner.silver, course.silver) + ore_price(miner.aurum, course.aurum) \
            + ore_price(miner.platinum, course.platinum) + ore_price(miner.palladium, course.palladium)

    await call.message.edit_text(text=message_courses_await(course, money),
                                           reply_markup=statistic_keyboard('update_course', '‚õè'))


@dp.callback_query_handler(text='market_ore')
async def converter(call: CallbackQuery):
    miner = Miner.get(minerid=call.from_user.id)
    course = Courses.get()
    miner.work_id_converter = False
    miner.save()
    money = ore_price(miner.coal, course.coal) + ore_price(miner.tin, course.tin) + ore_price(miner.iron, course.iron) \
            + ore_price(miner.silver, course.silver) + ore_price(miner.aurum, course.aurum) \
            + ore_price(miner.platinum, course.platinum) + ore_price(miner.palladium, course.palladium)
    await call.message.edit_text(text=f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∏—Ä–∂–∞ —Ä—É–¥ –∏ —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥.\n–†–∞–±–æ—Ç–∞ –≤ —à–∞—Ö—Ç–∞—Ö <b>–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>.'
                              f'\nüßæ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—ã—Ä—å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {money:.2f}$\n'
                              f'<b>\nüìä –ò–∑ –Ω–∏—Ö - </b>\n'
                              f'\n‚¨õÔ∏è –£–≥–æ–ª—å - {ore_price(miner.coal, course.coal):.2f}\n'
                              f'\nüüß –û–ª–æ–≤–æ - {ore_price(miner.tin, course.tin):.2f}\n'
                              f'\n‚¨úÔ∏è –ñ–µ–ª–µ–∑–æ - {ore_price(miner.iron, course.iron):.2f}\n'
                              f'\n‚¨úÔ∏è –°–µ—Ä–µ–±—Ä–æ - {ore_price(miner.silver, course.silver):.2f}\n'
                              f'\nüü® –ó–æ–ª–æ—Ç–æ - {ore_price(miner.aurum, course.aurum):.2f}\n'
                              f'\nüü• –ü–ª–∞—Ç–∏–Ω–∞ - {ore_price(miner.platinum, course.platinum):.2f}\n'
                              f'\nüü¶ –ü–∞–ª–ª–∞–¥–∏–π - {ore_price(miner.palladium, course.palladium):.2f}\n',
                         reply_markup=sellkeyboard(call.from_user.id))




@dp.callback_query_handler(text='sell_all')
async def sell(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    money = ore_price(miner.coal, course.coal) + ore_price(miner.tin, course.tin) + ore_price(miner.iron, course.iron) \
            + ore_price(miner.silver, course.silver) + ore_price(miner.aurum, course.aurum) \
            + ore_price(miner.platinum, course.platinum) + ore_price(miner.palladium, course.palladium)
    miner.balance += money
    miner.coal, miner.tin, miner.iron, miner.silver, miner.aurum, miner.platinum, miner.palladium = 0, 0, 0, 0, 0, 0, 0
    miner.work_id_converter = True
    miner.save()
    await call.message.edit_text(text=f'üìà–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø—Ä–æ–¥–∞–ª–∏ –≤—Å—ë, —Ä–∞–±–æ—Ç–∞ <b>–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>.'
                              f'\nüí∞–ë–∞–ª–∞–Ω—Å —Å–µ–π—á–∞—Å: {miner.balance:.2f}$', reply_markup=bank_keyboard())


@dp.message_handler(Command('reset_courses'))
async def reset(message: types.Message):
    miner = Miner.get(minerid=message.from_user.id)
    if miner.minerid in admins:
        course = Courses.get()
        course.coal, course.tin, course.iron, course.silver, course.aurum, course.platinum, course.palladium = 0.001, 0.005, 0.03, 0.1, 5.0, 8.5, 18.9
        course.save()
        await message.reply(text='–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è default')

@dp.callback_query_handler(text='fast_sell')
async def fast_sell(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    money = ore_price(miner.coal, course.coal) + ore_price(miner.tin, course.tin) + ore_price(miner.iron, course.iron) \
            + ore_price(miner.silver, course.silver) + ore_price(miner.aurum, course.aurum) \
            + ore_price(miner.platinum, course.platinum) + ore_price(miner.palladium, course.palladium)
    miner.balance += money
    miner.coal, miner.tin, miner.iron, miner.silver, miner.aurum, miner.platinum, miner.palladium = 0, 0, 0, 0, 0, 0, 0
    miner.work_id_converter = True
    miner.save()
    await call.message.edit_text(text=message_courses_await(course, money),
                                 reply_markup=statistic_keyboard('update_course', '‚õè', miner.fast_sell))

@dp.callback_query_handler(text='coal')
async def sell_one_ore(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    miner.balance += ore_price(miner.coal, course.coal)
    miner.coal = 0
    miner.save()
    await call.message.edit_text(text='–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())

@dp.callback_query_handler(text='tin')
async def sell_one_ore(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    miner.balance += ore_price(miner.tin, course.tin)
    miner.tin = 0
    miner.save()
    await call.message.edit_text(text='–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())

@dp.callback_query_handler(text='iron')
async def sell_one_ore(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    miner.balance += ore_price(miner.iron, course.iron)
    miner.iron = 0
    miner.save()
    await call.message.edit_text(text='–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())

@dp.callback_query_handler(text='silver')
async def sell_one_ore(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    miner.balance += ore_price(miner.silver, course.silver)
    miner.silver = 0
    miner.save()
    await call.message.edit_text(text='–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())


@dp.callback_query_handler(text='aurum')
async def sell_one_ore(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    miner.balance += ore_price(miner.aurum, course.aurum)
    miner.aurum = 0
    miner.save()
    await call.message.edit_text(text='–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())

@dp.callback_query_handler(text='platinum')
async def sell_one_ore(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    miner.balance += ore_price(miner.platinum, course.platinum)
    miner.platinum = 0
    miner.save()
    await call.message.edit_text(text='–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())

@dp.callback_query_handler(text='palladium')
async def sell_one_ore(call: CallbackQuery):
    course = Courses.get()
    miner = Miner.get(minerid=call.from_user.id)
    miner.balance += ore_price(miner.palladium, course.palladium)
    miner.palladium = 0
    miner.save()
    await call.message.edit_text(text='–°–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())