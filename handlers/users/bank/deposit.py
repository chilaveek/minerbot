from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from random import randint

from data.peewee import Miner
from handlers.users.bank.bank import bank_keyboard
from loader import dp

def deposit_btn():
    button = [
        InlineKeyboardButton(text='‚ûï', callback_data='deposit_plus'),
        InlineKeyboardButton(text='‚ûñ', callback_data='deposit_minus'),
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='in_bank')
    ]
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(*button)
    return kb

class Deposit(StatesGroup):
    plus = State()
    minus = State()


@dp.callback_query_handler(text='deposit_in_bank')
async def deposit(call: CallbackQuery):
    miner = Miner.get(minerid=call.from_user.id)
    await call.message.edit_text(text=f'–í–∞—à –æ–±—â–∏–π –≤–∫–ª–∞–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{miner.deposit}$</b>'
                              f'\n–î–æ—Ö–æ–¥ —Å –Ω–µ–≥–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{(miner.deposit*0.025).__round__(2)}$</b>'
                              f'\n---\n'
                              f'–í–∫–ª–∞–¥ –∏–¥—ë—Ç –≤ –±–∞–Ω–∫ –ø–æ —Å—Ç–∞–≤–∫–µ 2.5% –≤ —á–∞—Å, —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –≤–∞—à —Å—á—ë—Ç. '
                              f'–ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ 1000$ –≤–∫–ª–∞–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 25$ –Ω–∞ —Å—á—ë—Ç –µ–∂–µ—á–∞—Å–Ω–æ. –î—É–º–∞–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ - '
                              f'–Ω–µ —Å—Ç–æ–∏—Ç —Ç—Ä–∞—Ç–∏—Ç—å –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –Ω–∞ –≤–∫–ª–∞–¥', reply_markup=deposit_btn())

@dp.callback_query_handler(text='deposit_plus', state=None)
async def deposit_change(call: CallbackQuery):
    miner = Miner.get(minerid=call.from_user.id)
    await call.message.edit_text(text=f'–û–∫–µ–π, —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 1 –¥–æ {int(miner.balance)} (–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç)'
                                      f'\n–ù–∞–ø—Ä–∏–º–µ—Ä: {randint(1, int(miner.balance))}')
    await Deposit.plus.set()

@dp.message_handler(state=Deposit.plus)
async def deposit_plus(message: types.Message, state=FSMContext):
    miner = Miner.get(minerid=message.from_user.id)
    deposit_num = message.text
    if deposit_num.isdigit() is True:
        deposit_num = int(message.text)
        if deposit_num > 0:
            if deposit_num <= miner.balance:
                miner.deposit += deposit_num
                miner.balance -= deposit_num
                miner.save()
                await message.answer(parse_mode='html', text='–¢—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())
            else:
                await message.answer(parse_mode='html', text='–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è <b>–ù–ï</b> –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞', reply_markup=deposit_btn())
        else:
            await message.answer(parse_mode='html', text='–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è <b>–ù–ï</b> –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è', reply_markup=deposit_btn())
    else:
        await message.answer('–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —á–∏—Å–ª–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',reply_markup=deposit_btn())



    await state.finish()

@dp.callback_query_handler(text='deposit_minus', state=None)
async def deposit_change(call: CallbackQuery):
    miner = Miner.get(minerid=call.from_user.id)
    await call.message.edit_text(text=f'–û–∫–µ–π, —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–≤–µ–¥–∏ —Å—É–º–º—É —Å–Ω—è—Ç–∏—è —Å –¥–µ–ø–æ–∑–∏—Ç–∞ –æ—Ç 1 –¥–æ {int(miner.deposit)} (C—É–º–º–∞ –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞)'
                                      f'\n–ù–∞–ø—Ä–∏–º–µ—Ä: {randint(1, int(miner.deposit))}')
    await Deposit.minus.set()

@dp.message_handler(state=Deposit.minus)
async def deposit_plus(message: types.Message, state=FSMContext):
    miner = Miner.get(minerid=message.from_user.id)
    deposit_num = message.text
    if deposit_num.isdigit() is True:
        deposit_num = int(message.text)
        if deposit_num > 0:
            if deposit_num <= miner.deposit:
                miner.balance += deposit_num
                miner.deposit -= deposit_num
                miner.save()
                await message.answer(parse_mode='html', text='–¢—Ä–∞–Ω–∫–∑–∞–∫—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', reply_markup=bank_keyboard())
            else:
                await message.answer(parse_mode='html', text='–°—É–º–º–∞ —Å–Ω—è—Ç–∏—è <b>–ù–ï</b> –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞', reply_markup=deposit_btn())
        else:
            await message.answer(parse_mode='html', text='–°—É–º–º–∞ —Å–Ω—è—Ç–∏—è <b>–ù–ï</b> –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è', reply_markup=deposit_btn())
    else:
        await message.answer('–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —á–∏—Å–ª–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.',reply_markup=deposit_btn())



    await state.finish()



@dp.callback_query_handler(text='in_bank')
async def in_bank(call: CallbackQuery):
    await call.message.edit_text(text='–í—ã –∑–∞—à–ª–∏ –≤ <b>üè¶ –ë–∞–Ω–∫</b>', reply_markup=bank_keyboard())